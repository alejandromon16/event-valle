# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AssignRolesToUserInput {
  roles: [RoleType!]!
  userId: String!
}

input CreateEventInput {
  address: String!
  createdAt: String
  description: String!
  endDate: String
  images: [String!]!
  locationName: String!
  principalImage: String!
  requestEventId: String!
  startDate: String!
  subtitle: String!
  tags: [String!]!
  title: String!
}

input CreateRequestEventInput {
  createdAt: String
  requestedById: String!
  title: String!
}

input CreateRoleInput {
  description: String!
  name: RoleType!
}

input CreateUserInput {
  createdAt: Int
  email: String!
  last_name: String!
  name: String!
  password: String!
  phone_number: String
  user_name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EventEntity {
  address: String!
  createdAt: String!
  description: String!
  endDate: DateTime
  id: String!
  images: [String!]!
  latitud: Float
  locationDetail: String
  locationName: String!
  longitud: Float
  principalImage: String!
  startDate: DateTime!
  status: EventStatus!
  subtitle: String!
  tags: [String!]!
  title: String!
  updatedAt: String!
}

"""Possible status for events"""
enum EventStatus {
  DRAFT
  PUBLISH
}

input FindRoleByNameInput {
  name: RoleType!
}

"""Login user input"""
input LoginInput {
  """Email of the user"""
  email: String!

  """Password of the user"""
  password: String!
}

type LogoutEntity {
  status: String!
}

type MeEntity {
  roles: [RoleEntity!]!
  userId: String!
}

type Mutation {
  assignRolesToUser(assignRolesToUser: AssignRolesToUserInput!): UserEntity!
  createEvent(createEventInput: CreateEventInput!): EventEntity!
  createRequestEvent(createRequestEventInput: CreateRequestEventInput!): RequestEventEntity!
  createRole(createRoleInput: CreateRoleInput!): RoleEntity!
  createUser(createUserInput: CreateUserInput!): UserEntity!
  login(loginInput: LoginInput!): UserEntity!
  removeUser(id: String!): UserEntity!
  requestPasswordReset(requestPasswordResetInput: RequestPasswordResetInput!): UserEntity!
  resetPassword(resetPasswordInput: ResetPasswordInput!): UserEntity!
  updateUser(updateUserInput: UpdateUserInput!): UserEntity!
  validatePasswordResetToken(validatePasswordResetTokenInput: ValidatePasswordResetTokenInput!): ValidatePasswordResetTokenEntity!
}

type Query {
  findRoleByName(findRoleByName: FindRoleByNameInput!): RoleEntity!
  getListOfEvents: [EventEntity!]!
  getListOfEventsForThisMonth: [EventEntity!]!
  getListOfEventsForThisWeek: [EventEntity!]!
  getListOfRequestsEvents: [RequestEventEntity!]!
  listUsers: [UserEntity!]!
  logout: LogoutEntity!
  me: MeEntity!
  retrieveUser(id: String!): UserEntity!
  rolesList: [RoleEntity!]!
}

type RequestEventEntity {
  createdAt: String
  id: String!
  requestedBy: UserEntity
  status: RequestEventStatus!
  title: String!
  updatedAt: String
}

"""Possible status for request event"""
enum RequestEventStatus {
  APPROVED
  PENDING
  REJECTED
}

"""Reset password input"""
input RequestPasswordResetInput {
  """Email of the user"""
  email: String!
}

"""Reset password input"""
input ResetPasswordInput {
  """New password to update"""
  newPassword: String!

  """Password reset token to validate"""
  token: String!
  userId: String!
}

type RoleEntity {
  description: String!
  id: String!
  name: RoleType!
  users: [UserEntity!]!
}

"""Possible roles for a user"""
enum RoleType {
  ADMIN
  CONTENT_APPROVER
  CONTENT_PUBLISHER
  CONTENT_VISULIZER
  REQUEST_APPROVER
  SUPER_ADMIN
  USER
}

input UpdateUserInput {
  createdAt: Int
  email: String
  id: String!
  last_name: String
  name: String
  password: String
  phone_number: String
  user_name: String
}

type UserEntity {
  createdAt: String
  email: String!
  id: String!
  last_name: String!
  name: String!
  password: String
  phone_number: String
  roles: [RoleEntity!]!
  updatedAt: String
  user_name: String!
}

type ValidatePasswordResetTokenEntity {
  """Expiration date of password reset token"""
  expiration_date: DateTime!
}

"""Validate password reset token input"""
input ValidatePasswordResetTokenInput {
  """Password reset token to validate"""
  token: String!
  user_id: String!
}